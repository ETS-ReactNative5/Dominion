{"ast":null,"code":"module.exports = class GameService {\n  constructor() {}\n\n  /* handleTurn(hand, deck, discard) {\n      let actions = 1;\n      let buys = 1;\n      while (actions > 0) {\n          this.handleActions(hand, deck);\n          actions--;\n      }\n      while (buys > 0) {\n          this.handleBuys(hand, deck);\n          buys--;\n      }\n      this.handleCleanUp(hand, deck, discard);\n  } */\n  //returns amount of money left or -1 if no purchase made\n  handleBuys(hand, cost) {\n    let totalTreasure = 0;\n    hand.map(function (card) {\n      if (card.treasureValue) {\n        totalTreasure += card.treasureValue;\n      }\n    });\n    let remainder = totalTreasure - cost;\n\n    if (remainder < 0) {\n      return -1;\n    } // remove the number of used treasures from hand\n\n\n    for (let i = 0; i < hand.length; i++) {\n      if (hand[i].treasureValue) {\n        hand.pop();\n      }\n    }\n\n    return remainder;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/mashr/Google Drive/AlgorithmPractice/friday/src/controllers/gameController.js"],"names":["module","exports","GameService","constructor","handleBuys","hand","cost","totalTreasure","map","card","treasureValue","remainder","i","length","pop"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,WAAN,CAAkB;AAC/BC,EAAAA,WAAW,GAAG,CAAE;;AAChB;;;;;;;;;;;;;AAcA;AACAC,EAAAA,UAAU,CAACC,IAAD,EAAOC,IAAP,EAAa;AACnB,QAAIC,aAAa,GAAG,CAApB;AACAF,IAAAA,IAAI,CAACG,GAAL,CAAS,UAAUC,IAAV,EAAe;AACpB,UAAIA,IAAI,CAACC,aAAT,EAAwB;AACpBH,QAAAA,aAAa,IAAGE,IAAI,CAACC,aAArB;AACH;AACJ,KAJD;AAKA,QAAIC,SAAS,GAAGJ,aAAa,GAAGD,IAAhC;;AACA,QAAIK,SAAS,GAAG,CAAhB,EAAmB;AACf,aAAO,CAAC,CAAR;AACH,KAVkB,CAWnB;;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAAI,CAACQ,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,UAAIP,IAAI,CAACO,CAAD,CAAJ,CAAQF,aAAZ,EAA2B;AACvBL,QAAAA,IAAI,CAACS,GAAL;AACH;AACJ;;AACD,WAAOH,SAAP;AACH;;AAnC8B,CAAnC","sourcesContent":["module.exports = class GameService {\n    constructor() {};\n    /* handleTurn(hand, deck, discard) {\n        let actions = 1;\n        let buys = 1;\n        while (actions > 0) {\n            this.handleActions(hand, deck);\n            actions--;\n        }\n        while (buys > 0) {\n            this.handleBuys(hand, deck);\n            buys--;\n        }\n        this.handleCleanUp(hand, deck, discard);\n    } */\n\n    //returns amount of money left or -1 if no purchase made\n    handleBuys(hand, cost) {\n        let totalTreasure = 0;\n        hand.map(function (card){\n            if (card.treasureValue) {\n                totalTreasure+= card.treasureValue;\n            }\n        });\n        let remainder = totalTreasure - cost\n        if (remainder < 0) {\n            return -1;\n        }\n        // remove the number of used treasures from hand\n        for (let i = 0; i < hand.length; i++) {\n            if (hand[i].treasureValue) {\n                hand.pop();\n            }\n        }\n        return remainder;\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}